import React, { useState, useRef, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useLoader } from '../contexts/LoaderContext';
import AllCoursesButton from './AllCoursesButton';
import CourseRegistrationForm from './course/RegistrationForm'
import AlreadySubmitted from '../pages/blog/details/already_submitted';

const Header = () => {

    const [isNavActive, setIsNavActive] = useState(false);
    const [activeDropdown, setActiveDropdown] = useState(null);
    const dropdownRefs = useRef([]);
    const router = useRouter();
    const { setLoading } = useLoader();
    const [isMobile, setIsMobile] = useState(false);

    const formRef = useRef(null);
    const overlayRef = useRef(null);

    const handleButtonClick = () => {
        if (formRef.current && overlayRef.current) {
            formRef.current.style.display = "block";
            overlayRef.current.style.display = "block";
        }
    };

    const hidePopupForm = () => {
        if (formRef.current && overlayRef.current) {
            formRef.current.style.display = "none";
            overlayRef.current.style.display = "none";
        }
    }

    const [formVisibility, setFormVisibility] = useState(false);
    const [formFields, setFormFields] = useState([]);
    const [heading, setHeading] = useState("");
    const [buttonLabel, setButtonLabel] = useState("");
    const [formSuccessCallback, setFormSuccessCallback] = useState(null);

    const formConfigs = {
        "Enquiry Now": {
            fields: ["fullName", "email", "phone", "qualification", "message"],
            heading: "Enquiry Now",
            buttonLabel: "Enquiry Now",
        }
    }

    const [detailsSubmitted, setDetailsSubmitted] = useState(false);
    const handleDetailsSubmitted = () => {
        setDetailsSubmitted(false);
    }
    const openForm = (formType, onSuccessCallback) => {
        const config = formConfigs[formType];

        let userDetails = localStorage.getItem("userDetails");
        if (userDetails) {
            setDetailsSubmitted(true);
        } else {
            if (config) {
                setFormFields(config.fields);
                setHeading(config.heading);
                setButtonLabel(config.buttonLabel);
                setFormVisibility(true);
                handleButtonClick();
            }
            if (onSuccessCallback) {
                setFormSuccessCallback(() => onSuccessCallback);
            } else {
                setFormSuccessCallback(null); // or undefined
            }
        }

    };

    const handleUserDetailsSubmissionStatus = (status) => {
        if (status) {
            setTimeout(() => { hidePopupForm() }, 3000)
        }
    }

    // Detect mobile device
    useEffect(() => {
        const handleResize = () => setIsMobile(window.innerWidth < 993);
        handleResize();
        window.addEventListener("resize", handleResize);
        return () => window.removeEventListener("resize", handleResize);
    }, []);


    const openHome = () => {
        setLoading(true)
        router.push(`/`); // Example route: /slug-value
        setLoading(false)
    }

    // Close dropdown when clicking outside
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (
                !dropdownRefs.current.some(ref => ref && ref.contains(event.target))
            ) {
                setActiveDropdown(null);
            }
        };
        document.addEventListener('click', handleClickOutside);
        return () => document.removeEventListener('click', handleClickOutside);
    }, []);

    const toggleDropdown = (index) => {
        setActiveDropdown(prev => (prev === index ? null : index));
    };
    return (
        <>
            <header  class="TLI-H-M-site-header">
                <section className="Main-Course-TLI-Common-Header-navbar">
                    <div className="Main-Course-TLI-Common-Header-logo cursor-pointer" onClick={openHome}>
                        <img src="/images/Main-Course-HP-Page-Techleads-Logo.svg" alt="Header-Techleads-Logo"
                            className="Main-Page-Techleads-Logo" />
                    </div>
                    {isMobile && <AllCoursesButton></AllCoursesButton>}
                    <nav className={`Main-Course-TLI-Common-Header-nav-links ${isNavActive ? 'active' : ''
                        }`}>
                        {!isMobile && <AllCoursesButton></AllCoursesButton>}
                        <a href="/" className="Main-Course-TLI-Header-a-hover">Home</a>
                        <a href="/comingsoon" className="Main-Course-TLI-Header-a-hover">About Us</a>
                        {[0].map((i) => (<div className="Main-Course-TLI-Common-Header-dropdown" key={i} ref={el => (dropdownRefs.current[i] = el)}>
                            <button className="Main-Course-TLI-Common-Header-dropdown-toggle Main-Course-TLI-Header-a-hover" onClick={(e) => { e.stopPropagation(); toggleDropdown(i); }}>
                                Services <i className={`fas fa-chevron-down chevron header-chevron-icon ${activeDropdown === i ? 'rotate' : ''}`}></i>
                            </button>
                            <div className={`Main-Course-TLI-Common-Header-dropdown-menu ${activeDropdown === i ? 'show' : ''
                                }`}>
                                <a href="/comingsoon" className="Main-Course-TLI-Sub-Header-a-hover">Oracle</a>
                                <a href="/comingsoon" className="Main-Course-TLI-Sub-Header-a-hover">SAP</a>
                                <a href="/comingsoon" className="Main-Course-TLI-Sub-Header-a-hover">Microsoft</a>
                                <a href="/comingsoon" className="Main-Course-TLI-Sub-Header-a-hover">Salesforce</a>
                                <a href="/comingsoon" className="Main-Course-TLI-Sub-Header-a-hover">Service now</a>
                            </div>
                        </div>
                        ))}
                        {/* <a href="/courses" className="Main-Course-TLI-Header-a-hover">Trainings</a> */}
                        <a href="/careers" className="Main-Course-TLI-Header-a-hover">Careers</a>
                        <a href="/contactus" className="Main-Course-TLI-Header-a-hover">Contact Us</a>
                        <div className="Main-Course-TLI-Mobile-Header">
                            <button class="Header-Enquiry-Btn-Mbl" onClick={() => openForm("Enquiry Now")}> Enquiry Now
                            </button>
                            <a href="/signin" className="Main-Course-TLI-MB-Common-Header-login-btn">Login!</a>
                        </div>
                    </nav>
                    <div className="Main-Course-TLI-Common-Header-icons">
                        <button class="Header-Enquiry-Btn" onClick={() => openForm("Enquiry Now")}> Enquiry Now
                        </button>
                        <a href="/signin" className="Main-Course-TLI-Common-Header-login-btn">Login!</a>
                        <label className="Main-Course-TLI-Common-Header-hamburger">
                            <input type="checkbox" checked={isNavActive}
                                onChange={() => setIsNavActive(prev => !prev)} />
                            <svg viewBox="0 0 32 32">
                                <path
                                    className="Main-Course-TLI-Common-Header-hamburger-line Main-Course-TLI-Common-Header-hamburger-line-top-bottom"
                                    d="M27 10 13 10C10.8 10 9 8.2 9 6 9 3.5 10.8 2 13 2 15.2 2 17 3.8 17 6L17 26C17 28.2 18.8 30 21 30 23.2 30 25 28.2 25 26 25 23.8 23.2 22 21 22L7 22">
                                </path>
                                <path className="Main-Course-TLI-Common-Header-hamburger-line" d="M7 16 27 16"></path>
                            </svg>
                        </label>
                    </div>
                </section>

            </header>
            <div className="Main-Course-Overlay" ref={formRef} style={{ display: "none" }}></div>
            <CourseRegistrationForm
                overlayRef={overlayRef}
                visible={formVisibility}
                fields={formFields}
                heading={heading}
                buttonLabel={buttonLabel}
                hidePopupForm={hidePopupForm}
                pageName="Header - Enquiry"
                onSuccess={(data) => {
                    //console.log("Success!", data);
                    handleUserDetailsSubmissionStatus(true);
                    if (formSuccessCallback) {
                        formSuccessCallback(data); // ← This must be triggered here
                        setFormSuccessCallback(null); // reset after call
                    }
                }}
            ></CourseRegistrationForm>
            {detailsSubmitted && <><div className="Main-Course-Overlay"></div><AlreadySubmitted handleDetailsSubmitted={handleDetailsSubmitted}></AlreadySubmitted></>}
        </>
    )
}

export default Header;